// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	rabbitmq "customers/internal/rabbitmq"

	mock "github.com/stretchr/testify/mock"
)

// PublisherInterface is an autogenerated mock type for the PublisherInterface type
type PublisherInterface struct {
	mock.Mock
}

// GetChannel provides a mock function with given fields: _a0
func (_m *PublisherInterface) GetChannel(_a0 string) rabbitmq.ChannelInterface {
	ret := _m.Called(_a0)

	var r0 rabbitmq.ChannelInterface
	if rf, ok := ret.Get(0).(func(string) rabbitmq.ChannelInterface); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rabbitmq.ChannelInterface)
		}
	}

	return r0
}

// GetChannels provides a mock function with given fields:
func (_m *PublisherInterface) GetChannels() []rabbitmq.ChannelInterface {
	ret := _m.Called()

	var r0 []rabbitmq.ChannelInterface
	if rf, ok := ret.Get(0).(func() []rabbitmq.ChannelInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rabbitmq.ChannelInterface)
		}
	}

	return r0
}

// GetConnection provides a mock function with given fields:
func (_m *PublisherInterface) GetConnection() rabbitmq.ConnectionInterface {
	ret := _m.Called()

	var r0 rabbitmq.ConnectionInterface
	if rf, ok := ret.Get(0).(func() rabbitmq.ConnectionInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rabbitmq.ConnectionInterface)
		}
	}

	return r0
}

// Pub provides a mock function with given fields: queueName, body, requestID
func (_m *PublisherInterface) Pub(queueName string, body interface{}, requestID string) error {
	ret := _m.Called(queueName, body, requestID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, string) error); ok {
		r0 = rf(queueName, body, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
